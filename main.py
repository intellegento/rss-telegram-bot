import asyncio
import logging
from typing import Dict, List
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from config import (
    TELEGRAM_TOKEN,
    DEFAULT_RSS_SOURCES,
    DEFAULT_UPDATE_INTERVAL,
    MAX_KEYWORDS_PER_USER
)
from database import DatabaseManager, User
from news_sources.rss_handler import RSSHandler
from news_sources.binance_handler import BinanceHandler
from utils import format_message, validate_keyword, clean_username

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_KEYWORD, REMOVING_KEYWORD, ADDING_SOURCE, REMOVING_SOURCE = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class NewsBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.rss_handler = RSSHandler()
        self.binance_handler = BinanceHandler()
        self.user_states: Dict[int, str] = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_name = clean_username(user.first_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if not self.db.get_user(chat_id):
            self.db.add_user(chat_id)

        keyboard = [
            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
            ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {clean_name}! üëã\n\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–≤–æ–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
            reply_markup=reply_markup
        )
        return CHOOSING_ACTION

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
        help_text = (
            "ü§ñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /add_source\n"
            "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "3Ô∏è‚É£ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "4Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/keywords - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            "/remove - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            "/sources - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "/add_source - –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
            "/remove_source - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤' –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def add_keyword_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞."""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "(–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ - . )\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: bitcoin, eth, binance"
        )
        return ADDING_KEYWORD

    async def process_new_keyword(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."""
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [kw.strip() for kw in text.split(',') if kw.strip()]
        
        if not keywords:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ."
            )
            return ADDING_KEYWORD

        current_keywords = self.db.get_keywords(user_id)
        if len(current_keywords) + len(keywords) > MAX_KEYWORDS_PER_USER:
            await update.message.reply_text(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ({MAX_KEYWORDS_PER_USER}).\n"
                "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö."
            )
            return CHOOSING_ACTION

        added_keywords = []
        skipped_keywords = []
        invalid_keywords = []

        for keyword in keywords:
            if not validate_keyword(keyword):
                invalid_keywords.append(keyword)
                continue

            if keyword.lower() in [k.lower() for k in current_keywords]:
                skipped_keywords.append(keyword)
                continue

            if self.db.add_keyword(user_id, keyword):
                added_keywords.append(keyword)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_parts = []
        if added_keywords:
            response_parts.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(added_keywords)}")
        if skipped_keywords:
            response_parts.append(f"‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {', '.join(skipped_keywords)}")
        if invalid_keywords:
            response_parts.append(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞: {', '.join(invalid_keywords)}")

        await update.message.reply_text("\n".join(response_parts) or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return CHOOSING_ACTION

    async def remove_keyword_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞."""
        user_id = update.effective_user.id
        keywords = self.db.get_keywords(user_id)

        if not keywords:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
            return CHOOSING_ACTION

        keyboard = [[word] for word in keywords]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return REMOVING_KEYWORD

    async def process_remove_keyword(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞."""
        keyword = update.message.text.strip()
        user_id = update.effective_user.id

        if keyword == "–û—Ç–º–µ–Ω–∞":
            keyboard = [
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
            return CHOOSING_ACTION

        if self.db.remove_keyword(user_id, keyword):
            keyboard = [
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")

        return CHOOSING_ACTION

    async def show_keywords(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = update.effective_user.id
        keywords = self.db.get_keywords(user_id)

        if keywords:
            text = "üìã –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n" + "\n".join(f"‚Ä¢ {word}" for word in keywords)
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."

        await update.message.reply_text(text)

    async def sources_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        rss_sources = self.db.get_sources(source_type='rss')
        binance_sources = self.db.get_sources(source_type='binance')

        message = "üìã <b>–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
        
        if rss_sources:
            message += "üì∞ <b>RSS-–∫–∞–Ω–∞–ª—ã:</b>\n"
            for src in rss_sources:
                last_fetch = src['last_fetch'].strftime('%d.%m.%Y %H:%M') if src['last_fetch'] else '–ù–∏–∫–æ–≥–¥–∞'
                message += f"‚Ä¢ {src['name']} (ID: {src['id']})\n  ‚îî {src['url']}\n  ‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_fetch}\n\n"
        
        if binance_sources:
            message += "\nüí∞ <b>Binance:</b>\n"
            for src in binance_sources:
                last_fetch = src['last_fetch'].strftime('%d.%m.%Y %H:%M') if src['last_fetch'] else '–ù–∏–∫–æ–≥–¥–∞'
                message += f"‚Ä¢ {src['name']} (ID: {src['id']})\n  ‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_fetch}\n\n"

        message += "\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/add_source - –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        message += "/remove_source - –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"

        await update.message.reply_text(message, parse_mode='HTML')

    async def add_source_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        keyboard = [
            ["RSS-–∫–∞–Ω–∞–ª", "Binance"],
            ["–û—Ç–º–µ–Ω–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞:",
            reply_markup=reply_markup
        )
        return ADDING_SOURCE

    async def process_add_source(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        text = update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        if text == "–û—Ç–º–µ–Ω–∞":
            keyboard = [
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=reply_markup
            )
            return CHOOSING_ACTION

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if text in ["RSS-–∫–∞–Ω–∞–ª", "Binance"]:
            if text == "RSS-–∫–∞–Ω–∞–ª":
                context.user_data['source_type'] = 'rss'
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ URL RSS-–∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–Ω–∞–∑–≤–∞–Ω–∏–µ | url\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "CoinTelegraph | https://cointelegraph.com/rss\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'"
                )
                return ADDING_SOURCE
            else:  # Binance
                try:
                    if self.db.add_source(
                        url="https://www.binance.com/bapi/composite/v1/public/cms/article/catalog/list",
                        name="Binance News",
                        source_type="binance"
                    ):
                        keyboard = [
                            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                            ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
                        ]
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        await update.message.reply_text(
                            "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ Binance —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                            reply_markup=reply_markup
                        )
                    else:
                        await update.message.reply_text(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ Binance. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                        )
                except Exception as e:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Binance: {str(e)}"
                    )
                return CHOOSING_ACTION

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSS-–∫–∞–Ω–∞–ª–∞
        if 'source_type' in context.user_data and context.user_data['source_type'] == 'rss':
            try:
                if '|' not in text:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                        "–Ω–∞–∑–≤–∞–Ω–∏–µ | url\n\n"
                        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'"
                    )
                    return ADDING_SOURCE

                name, url = map(str.strip, text.split('|'))
                if not name or not url:
                    await update.message.reply_text(
                        "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏ URL –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.\n"
                        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'"
                    )
                    return ADDING_SOURCE

                if self.db.add_source(url=url, name=name, source_type='rss'):
                    keyboard = [
                        ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                        ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                        ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        f"‚úÖ RSS-–∫–∞–Ω–∞–ª '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                        reply_markup=reply_markup
                    )
                    context.user_data.pop('source_type', None)
                    return CHOOSING_ACTION
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å RSS-–∫–∞–Ω–∞–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
                    )
                    return ADDING_SOURCE
            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ RSS-–∫–∞–Ω–∞–ª–∞: {str(e)}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
                )
                return ADDING_SOURCE

        return ADDING_SOURCE

    async def remove_source_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        sources = self.db.get_sources()
        
        if not sources:
            keyboard = [
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return CHOOSING_ACTION

        keyboard = [[f"{src['name']} (ID: {src['id']})"] for src in sources]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return REMOVING_SOURCE

    async def process_remove_source(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        text = update.message.text

        if text == "–û—Ç–º–µ–Ω–∞":
            keyboard = [
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
            return CHOOSING_ACTION

        try:
            source_id = int(text.split('ID: ')[1].rstrip(')'))
            if self.db.remove_source(source_id):
                keyboard = [
                    ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"],
                    ["üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
                    ["üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"],
                    ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫.")
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

        return CHOOSING_ACTION

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        text = update.message.text

        if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ":
            return await self.add_keyword_command(update, context)
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ":
            return await self.remove_keyword_command(update, context)
        elif text == "üìã –ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
            await self.show_keywords(update, context)
            return CHOOSING_ACTION
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
            return CHOOSING_ACTION
        elif text == "üì∞ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤":
            await self.sources_command(update, context)
            return CHOOSING_ACTION
        elif text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫":
            return await self.add_source_command(update, context)
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫":
            return await self.remove_source_command(update, context)

        return CHOOSING_ACTION

    async def check_news(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        try:
            all_news = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            rss_sources = self.db.get_sources(source_type='rss')
            binance_sources = self.db.get_sources(source_type='binance')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–∫–∞–Ω–∞–ª–æ–≤
            for source in rss_sources:
                try:
                    news = await self.rss_handler.get_news([source['url']])
                    all_news.extend(news)
                    self.db.update_source_last_fetch(source['id'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {source['name']}: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Binance
            if binance_sources:
                try:
                    binance_news = await self.binance_handler.get_announcements()
                    all_news.extend(binance_news)
                    for source in binance_sources:
                        self.db.update_source_last_fetch(source['id'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Binance: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            all_news.sort(key=lambda x: x['published'], reverse=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with self.db.Session() as session:
                users = session.query(User).filter_by(is_active=True).all()
                
                for user in users:
                    keywords = self.db.get_keywords(user.telegram_id)
                    if not keywords:
                        continue
                        
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    filtered_news = []
                    for news in all_news:
                        text = f"{news['title']} {news['description']}".lower()
                        if any(keyword.lower() in text for keyword in keywords):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å —Ä–∞–Ω–µ–µ
                            if not self.db.is_news_seen(user.telegram_id, news['hash']):
                                filtered_news.append(news)
                                self.db.add_seen_news(user.telegram_id, news['hash'])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    for news in filtered_news[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
                        try:
                            message = format_message(news)
                            await context.bot.send_message(
                                chat_id=user.telegram_id,
                                text=message,
                                parse_mode='HTML',
                                disable_web_page_preview=True
                            )
                            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                            continue
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = NewsBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", bot.start)],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message),
            ],
            ADDING_KEYWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_new_keyword),
            ],
            REMOVING_KEYWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_remove_keyword),
            ],
            ADDING_SOURCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_add_source),
            ],
            REMOVING_SOURCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_remove_source),
            ],
        },
        fallbacks=[CommandHandler("start", bot.start)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("keywords", bot.show_keywords))
    application.add_handler(CommandHandler("sources", bot.sources_command))
    application.add_handler(CommandHandler("add_source", bot.add_source_command))
    application.add_handler(CommandHandler("remove_source", bot.remove_source_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    application.job_queue.run_repeating(bot.check_news, interval=300, first=10)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 