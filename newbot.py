from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import cv2
import logging

def decode_barcode(image_path):
    try:
        image = cv2.imread(image_path)
        detector = cv2.barcode_BarcodeDetector()
        retval, decoded_info, decoded_type, points = detector.detectAndDecode(image)
        if retval:
            return decoded_info[0]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤. üì∏\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —à—Ç—Ä–∏—Ö–∫–æ–¥–∞, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n"
        "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å!"
    )
    await update.message.reply_text(welcome_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await update.message.photo[-1].get_file()
        await file.download_to_drive('barcode.jpg')
        logger.info("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥
        barcode_data = decode_barcode('barcode.jpg')
        if barcode_data:
            await update.message.reply_text(f"‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {barcode_data}")
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥: {barcode_data}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            logger.warning("–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    token = "8081704880:AAE4uCB8kqBj9SCdQuYl8bsFlSWefUz36aU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())