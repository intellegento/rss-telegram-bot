from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import feedparser
import re
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á
TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")

# –•—Ä–∞–Ω–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
user_keywords = {}
seen_titles = {}
update_intervals = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS
def parse_rss(url):
    feed = feedparser.parse(url)
    if feed.bozo:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ RSS-–ª–µ–Ω—Ç—ã: {url}")
        return None
    return feed.entries[:10]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"],
        ["–°–±—Ä–æ—Å–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    user_id = update.effective_user.id

    if context.user_data.get("awaiting_keywords"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        user_keywords[user_id] = text.split()
        seen_titles[user_id] = set()
        context.user_data["awaiting_keywords"] = False
        await update.message.reply_text(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(user_keywords[user_id])}")
    
    elif context.user_data.get("awaiting_interval"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if text.isdigit():
            update_intervals[user_id] = int(text)
            context.user_data["awaiting_interval"] = False
            await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {update_intervals[user_id]} —Å–µ–∫—É–Ω–¥.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    elif text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        context.user_data["awaiting_keywords"] = True

    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if user_id in user_keywords and user_keywords[user_id]:
            keywords = ', '.join(user_keywords[user_id])
            await update.message.reply_text(f"–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
        else:
            await update.message.reply_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    elif text == "–°–±—Ä–æ—Å–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        user_keywords.pop(user_id, None)
        seen_titles.pop(user_id, None)
        await update.message.reply_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–±—Ä–æ—à–µ–Ω—ã.")
    
    elif text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        context.user_data["awaiting_interval"] = True

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def auto_update(context: CallbackContext) -> None:
    url = "https://cointelegraph.com/rss"
    entries = parse_rss(url)
    if not entries:
        print("–û—à–∏–±–∫–∞: RSS-–ª–µ–Ω—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return

    for user_id, keywords in user_keywords.items():
        if user_id not in seen_titles:
            seen_titles[user_id] = set()

        for entry in entries:
            if entry.title not in seen_titles[user_id]:
                for keyword in keywords:
                    if keyword.lower() in entry.title.lower():
                        seen_titles[user_id].add(entry.title)
                        highlighted_title = re.sub(
                            f"({re.escape(keyword)})",
                            r"<b>\1</b>",
                            entry.title,
                            flags=re.IGNORECASE
                        )
                        message = f"üì∞ {highlighted_title}\n\n{entry.link}"
                        try:
                            await context.bot.send_message(chat_id=user_id, text=message, parse_mode="HTML")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_API_KEY).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    application.job_queue.run_repeating(auto_update, interval=10, first=10)

    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é...")
    application.run_polling()

if __name__ == "__main__":
    main()
